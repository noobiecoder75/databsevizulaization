import React, { useMemo } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ScatterChart, Scatter, Cell } from 'recharts';
import { Colors, VendorData, CategoryVulnerabilityData } from './types';

interface VulnerabilitySlideProps {
  colors: Colors;
  vendorData: VendorData[];
}

const VulnerabilitySlide: React.FC<VulnerabilitySlideProps> = ({ colors, vendorData }) => {
  const categoryVulnerabilityData = useMemo(() => {
    if (!vendorData.length) return [];
    const analysis = vendorData.reduce((acc, vendor) => {
      const category = vendor.category || 'Unknown';
      const leadTime = Number(vendor.average_lead_time_days || 0);
      const spend = Number(vendor.annual_spend || 0);
      const supplierId = String(vendor.vendor_number || `unknown_supplier_${category}`);

      if (!acc[category]) {
        acc[category] = { totalLeadTime: 0, totalSpend: 0, supplierSet: new Set<string>(), count: 0 };
      }
      acc[category].totalLeadTime += leadTime;
      acc[category].totalSpend += spend;
      acc[category].supplierSet.add(supplierId);
      acc[category].count++;
      return acc;
    }, {} as Record<string, { totalLeadTime: number; totalSpend: number; supplierSet: Set<string>; count: number }>);

    return Object.entries(analysis).map(([name, data]) => {
      const avgLeadTime = data.count > 0 ? data.totalLeadTime / data.count : 0;
      const numSuppliers = data.supplierSet.size;
      // Improved scoring algorithm to reduce perfect correlation
      const leadTimeScore = Math.min(avgLeadTime / 30, 5); // Normalized to max 5
      const supplierRiskScore = Math.min(10 / (numSuppliers || 1), 5); // Normalized to max 5  
      const spendScore = Math.min(data.totalSpend / 10000000, 5); // Normalized to max 5
      const score = (leadTimeScore * 0.4) + (supplierRiskScore * 0.4) + (spendScore * 0.2);
      
      return {
        name: name.length > 15 ? name.substring(0,15) + "..." : name,
        fullName: name,
        avgLeadTime,
        numSuppliers,
        totalSpend: data.totalSpend,
        vulnerabilityScore: score,
        leadTimeScore,
        supplierRiskScore,
        spendScore
      };
    }).sort((a, b) => b.vulnerabilityScore - a.vulnerabilityScore).slice(0, 8);
  }, [vendorData]);

  // Create scatter plot data for lead time vs spend analysis  
  const scatterData = useMemo(() => {
    return categoryVulnerabilityData.map(item => ({
      x: item.avgLeadTime,
      y: item.totalSpend / 1000000, // Convert to millions
      category: item.name,
      numSuppliers: item.numSuppliers,
      size: Math.max(60 - (item.numSuppliers * 4), 20) // Larger bubbles for fewer suppliers
    }));
  }, [categoryVulnerabilityData]);

  // Relevant vendor statistics
  const vendorStats = useMemo(() => {
    const totalVendors = vendorData.length;
    const physicalProductVendors = vendorData.filter(v => 
      v.category && !['Services', 'Consulting', 'Software', 'Training'].some(service => 
        v.category?.toLowerCase().includes(service.toLowerCase())
      )
    ).length;
    const relevantPercentage = totalVendors > 0 ? Math.round((physicalProductVendors / totalVendors) * 100) : 0;

    return {
      totalVendors,
      physicalProductVendors,
      relevantPercentage
    };
  }, [vendorData]);

  return (
    <div className="h-full p-12" style={{ backgroundColor: colors.navy }}>
      <h1 className="text-5xl font-bold mb-6 text-white">Category Vulnerability Analysis</h1>
      <div className="bg-white rounded-lg p-6 shadow-lg h-[85%] flex flex-col">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-3xl font-semibold" style={{ color: colors.darkGreen }}>Risk Factor Analysis</h2>
          <div className="bg-blue-50 px-4 py-2 rounded-lg">
            <span className="text-sm font-medium">
              Physical Product Vendors: <strong>{vendorStats.physicalProductVendors}</strong> of {vendorStats.totalVendors} 
              (<strong>{vendorStats.relevantPercentage}%</strong> relevant for analysis)
            </span>
          </div>
        </div>
        <div className="flex-grow grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="h-[350px]">
            <h3 className="text-lg font-semibold mb-2" style={{ color: colors.navy }}>Risk Scores by Category</h3>
            {vendorData.length === 0 ? (
              <div className="flex items-center justify-center h-full text-gray-500">No vendor data processed.</div>
            ) : categoryVulnerabilityData.length > 0 ? (
              <ResponsiveContainer width="100%" height="90%">
                <BarChart data={categoryVulnerabilityData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.3}/>
                  <XAxis dataKey="name" angle={-45} textAnchor="end" height={60} fontSize={11}/>
                  <YAxis domain={[0, 5]} stroke="#718096"/>
                  <Tooltip
                    contentStyle={{ backgroundColor: 'rgba(255,255,255,0.9)', borderRadius: '8px', borderColor: colors.teal }}
                    formatter={(value: number, name: string) => {
                        if (name === "Vulnerability Score") return [value.toFixed(2), "Risk Score (0-5)"];
                        return [value, name];
                    }}
                    labelFormatter={(label) => `Category: ${categoryVulnerabilityData.find(d => d.name === label)?.fullName || label}`}
                  />
                  <Bar 
                    dataKey="vulnerabilityScore" 
                    name="Vulnerability Score" 
                    radius={[4, 4, 0, 0]} 
                    barSize={25}
                  >
                    {categoryVulnerabilityData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={
                        entry.vulnerabilityScore > 3.5 ? colors.chartRed :
                        entry.vulnerabilityScore > 2.5 ? colors.chartOrange :
                        entry.vulnerabilityScore > 1.5 ? colors.chartYellow :
                        colors.lightGreen
                      } />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            ) : (
              <p className="text-center text-gray-500">Insufficient data for vulnerability chart.</p>
            )}
          </div>
          
          <div className="h-[350px]">
            <h3 className="text-lg font-semibold mb-2" style={{ color: colors.navy }}>Lead Time vs Annual Spend</h3>
            {scatterData.length > 0 ? (
              <ResponsiveContainer width="100%" height="90%">
                <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>
                  <CartesianGrid />
                  <XAxis 
                    type="number" 
                    dataKey="x" 
                    name="Lead Time" 
                    unit=" days"
                    domain={[0, 'dataMax + 10']}
                  />
                  <YAxis 
                    type="number" 
                    dataKey="y" 
                    name="Annual Spend" 
                    unit="M"
                    tickFormatter={(tick) => `$${tick.toFixed(0)}M`}
                  />
                  <Tooltip 
                    cursor={{ strokeDasharray: '3 3' }}
                    formatter={(value: number, name: string) => {
                      if (name === "Lead Time") return [`${value.toFixed(0)} days`, "Avg Lead Time"];
                      if (name === "Annual Spend") return [`$${value.toFixed(1)}M`, "Total Spend"];
                      return [value, name];
                    }}
                    labelFormatter={(label, payload) => {
                      const data = payload?.[0]?.payload;
                      return data ? `${data.category} (${data.numSuppliers} suppliers)` : '';
                    }}
                  />
                  <Scatter name="Categories" data={scatterData} fill={colors.teal}>
                    {scatterData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={
                        entry.numSuppliers <= 2 ? colors.chartRed :
                        entry.numSuppliers <= 4 ? colors.chartOrange :
                        colors.teal
                      } />
                    ))}
                  </Scatter>
                </ScatterChart>
              </ResponsiveContainer>
            ) : (
              <p className="text-center text-gray-500">No data available for scatter plot.</p>
            )}
          </div>
        </div>
        
        <div className="mt-4 grid grid-cols-3 gap-4">
          <div className="p-3 bg-red-50 border-l-4 border-red-500">
            <strong style={{color: colors.chartRed}}>High Risk (3.5+):</strong> 
            <p className="text-sm">Long lead times + few suppliers + high spend</p>
          </div>
          <div className="p-3 bg-orange-50 border-l-4 border-orange-500">
            <strong style={{color: colors.chartOrange}}>Medium Risk (2.5-3.5):</strong> 
            <p className="text-sm">Moderate exposure across factors</p>
          </div>
          <div className="p-3 bg-blue-50 border-l-4 border-blue-500">
            <strong style={{color: colors.teal}}>Bubble Size:</strong> 
            <p className="text-sm">Larger bubbles = fewer suppliers (higher risk)</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilitySlide; 